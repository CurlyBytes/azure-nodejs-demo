name: $(BuildID)

trigger:
  branches:
    include:
    - fix/*
    - feat/*
    - main
  tags:
    include:
    - v*
  paths:
    exclude:
    - README.md

pr:
- main

pool:
  vmImage: 'ubuntu-latest'

schedules:
  - cron: "0 12 * * 0"
    displayName: Weekly Sunday build
    always: true
    branches:
      include:
      - main

variables:
- template: vars-global.yaml

stages:

# Tests Stage
# -----------
# Skipped for tags, i.e. no new code

- stage: Tests
  condition: not(${{ variables.isTag }})
  jobs:
  - job: Tests
    steps:
    - script: |
       echo 'hello imageTag: $(imageTag)'
    # - script: npm ci
    #   displayName: npm install

    # - script: npm audit --audit-level=moderate
    #   displayName: npm audit (dev)
    #   continueOnError: true

    # - script: npm audit --production --audit-level=high
    #   displayName: npm audit (prod)

    # - script: npm run lint
    #   displayName: linter

    # - script: npm run test
    #   displayName: tests


# Build Stage
# -----------
# Runs if:
# - push a tag starting with `v` (skips tests)
# - push to main (if tests passed)

- stage: Build
  displayName: Build Docker Image
  condition: true # or(${{ variables.isTag }}, and(succeeded(), ${{ variables.isMain }}, ${{ variables.isTrustedCI }}))
  variables:
    - group: nodejs-demo-kv
    # armConnection:  nodejs-demo-rg-conn
    # dockerRegistry: nodejsdemo.azurecr.io
    # imageName:      azure-nodejs-demo
    # ${{ if eq(variables.isTag, 'False') }}:
    #   imageTag: dev
    # ${{ if eq(variables.isTag, 'True') }}:
    #   imageTag: ${{ replace(variables['Build.SourceBranch'], 'refs/tags/v', '') }}

  jobs:
  - job: Build
    variables:
      ${{ if eq(variables.isTag, 'True') }}:
        imageTag: ${{ replace(variables['Build.SourceBranch'], 'refs/tags/v', '') }}
      dockerTag: ${{ variables.dockerRegistry }}/${{ variables.imageName }}:${{ variables.imageTag }}
    steps:
    - bash: |
        echo 'imageTag: $(imageTag)'
        echo 'dockerTag: $(dockerTag)'
    # - bash: docker build -t $(dockerTag) .
    #   displayName: docker build

    # - task: SnykSecurityScan@0
    #   displayName: Snyk Container Security Scan
    #   inputs:
    #     serviceConnectionEndpoint: 'snyk-api-connection'
    #     testType: 'container'
    #     dockerImageName: $(dockerTag)
    #     dockerfilePath: 'Dockerfile'
    #     monitorOnBuild: true
    #     failOnIssues: true

    # - bash: docker login $(dockerRegistry) --username $ACR_USERNAME --password $ACR_PASSWORD
    #   displayName: registry login
    #   env:
    #     ACR_USERNAME: $(kv-acr-username)
    #     ACR_PASSWORD: $(kv-acr-password)

    # - bash: docker push $(dockerTag)
    #   displayName: docker push

    # - bash: docker logout $(dockerRegistry)
    #   displayName: registry logout

    # - task: AzureCLI@2
    #   displayName: 'registry - lock prod image'
    #   condition: ${{ variables.isTag }}
    #   inputs:
    #     azureSubscription: ${{ variables.armConnection }}
    #     scriptType: bash
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       az acr repository update -n $(dockerRegistry) -t $(imageName):$(imageTag) --write-enabled false