name: $(BuildID)

trigger:
  branches:
    include:
    # - fix/*
    # - feat/*
    # - main
    - feat/split-pipeline
  tags:
    include:
    - v*
  paths:
    exclude:
    - README.md

pr:
- main

pool:
  vmImage: 'ubuntu-latest'

# schedules:
#   - cron: "0 12 * * 0"
#     displayName: Weekly Sunday build
#     always: true
#     branches:
#       include:
#       - main

variables:
  isMain:       true # ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  isTag:        ${{ startsWith(variables['Build.SourceBranch'], 'refs/tags/v') }}
  notFork:      ${{ eq(variables['System.PullRequest.IsFork'], 'False') }}
  notPR:        ${{ ne(variables['Build.Reason'], 'PullRequest') }}
  notSchedule:  ${{ ne(variables['Build.Reason'], 'Schedule') }}
  isTrustedCI:  ${{ and(variables.notFork, variables.notPR, variables.notSchedule) }}

stages:
# - stage: Tests
#   condition: not(${{ variables.isTag }})
#   jobs:
#   - job: Tests
#     steps:
#     - script: |
#         echo 'hello world'
#     - script: npm ci
#       displayName: npm install

#     - script: npm audit --audit-level=moderate
#       displayName: npm audit (dev)
#       continueOnError: true

#     - script: npm audit --production --audit-level=high
#       displayName: npm audit (prod)

#     - script: npm run lint
#       displayName: linter

#     - script: npm run test
#       displayName: tests

- stage: Build
  displayName: Build Docker Image
  condition: or(${{ variables.isTag }}, and(succeeded(), ${{ variables.isMain }}, ${{ variables.isTrustedCI }}))
  variables:
  - group: azure-demos-config
  - name: imageName
    value: demos/azure-nodejs-demo
  - name: imageTag
    ${{ if eq(variables.isTag, 'True') }}:
      value: ${{ replace(variables['Build.SourceBranch'], 'refs/tags/v', '') }}
    ${{ if eq(variables.isTag, 'False') }}:
      value: dev
  jobs:
  - job: Build
    steps:
    - script: |
        echo '[default] imageTag: $(imageTag)'
        echo '[default] isTag: $(isTag)'
        echo '[default] isMain: $(isMain)'
        echo '[default] isTrustedCI: $(isTrustedCI)'
        echo '[debug] lib-var-registry-connection: $(lib-var-registry-connection)'
      displayName: 'Debug: values'

    # - script: docker build -t $(imageTag) .
    #   displayName: docker build

    # - task: SnykSecurityScan@0
    #   displayName: Snyk Container Security Scan
    #   inputs:
    #     serviceConnectionEndpoint: 'snyk-api-connection'
    #     testType: 'container'
    #     dockerImageName: $(imageTag)
    #     dockerfilePath: 'Dockerfile'
    #     monitorOnBuild: true
    #     failOnIssues: true

    - task: Docker@2
      displayName: docker login (ACR)
      inputs:
        command: login
        containerRegistry: 'onazureio-registry-connection'

    # - task: Docker@2
    #   displayName: docker push
    #   inputs:
    #     command: push
    #     repository: $(imageName)
    #     tags: |
    #       $(imageTag)

    # - task: Docker@2
    #   displayName: Logout of ACR
    #   inputs:
    #     command: logout
    #     containerRegistry: $(lib-var-registry-connection)
