jobs:
- job: BuildAndScan
  displayName: Build and Scan
  condition: eq(variables.isTag, 'NEVER') # DEBUG
  steps:
  - template: ../steps/debug.yaml

  - bash: |
      npm ci
      npm run compile-sass
      docker build -t $(dockerImage):$(imageTag) .
    displayName: Docker - build

  - task: SnykSecurityScan@0
    displayName: Snyk - security scan
    inputs:
      serviceConnectionEndpoint: 'snyk-api-connection'
      testType: 'container'
      dockerImageName: $(dockerImage):$(imageTag)
      dockerfilePath: 'Dockerfile'
      monitorOnBuild: true
      failOnIssues: true

- job: DockerPush
  displayName: Push
  # dependsOn: BuildAndScan # DEBUG
  steps:
  - template: ../steps/debug.yaml

  - bash: |
      npm ci
      npm run compile-sass
    displayName: Compile CSS

  - task: Docker@2
    displayName: Login to ACR
    inputs:
      command: login
      containerRegistry: $(acrConnection)

  # Prefer ~7 characters over 40 char defult `Build.SourceVersion`
  - script: |
      echo "##vso[task.setvariable variable=imageTag]$(imageTag)-$(git rev-parse --short HEAD)"
    displayName: Tag - append git sha
    condition: eq(variables.isTag, 'False')

  - bash: |
      docker build -t $(dockerImage):$(imageTag) .
      docker push $(dockerImage):$(imageTag)
    displayName: Docker Build and Push

  - task: Docker@2
    displayName: Logout of ACR
    inputs:
      command: logout
      containerRegistry: $(acrConnection)

  - task: AzureCLI@2
    displayName: 'registry - lock image (prod)'
    condition: eq(variables.isTag, 'True')
    inputs:
      azureSubscription: $(armConnection)
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az acr repository update \
          --name $(dockerRegistry) \
          --image $(imageName):$(imageTag) \
          --write-enabled false